{"version":3,"file":"portal-directives.d.ts","sources":["portal-directives.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, EventEmitter, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { BasePortalOutlet, ComponentPortal, Portal, TemplatePortal } from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nexport declare class CdkPortal extends TemplatePortal {\n    constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef);\n}\n/**\n * Possible attached references to the CdkPortalOutlet.\n */\nexport declare type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nexport declare class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n    private _componentFactoryResolver;\n    private _viewContainerRef;\n    /** Whether the portal component is initialized. */\n    private _isInitialized;\n    /** Reference to the currently-attached component/view ref. */\n    private _attachedRef;\n    constructor(_componentFactoryResolver: ComponentFactoryResolver, _viewContainerRef: ViewContainerRef);\n    /** Portal associated with the Portal outlet. */\n    portal: Portal<any> | null;\n    attached: EventEmitter<CdkPortalOutletAttachedRef>;\n    /** Component or view reference that is attached to the portal. */\n    readonly attachedRef: CdkPortalOutletAttachedRef;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n}\nexport declare class PortalModule {\n}\n"]}